/* CTF 1.8 */

trace {
	major = 1;
	minor = 8;
	uuid = "c4f5ad74-2d9a-4a17-9633-3e9e49d5f773";
	byte_order = le;
	packet.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } magic;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } uuid[16];
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } stream_id;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } stream_instance_id;
	} align(8);
};

env {
	hostname = "sinkpad";
	domain = "ust";
	tracer_name = "lttng-ust";
	tracer_major = 2;
	tracer_minor = 10;
};

clock {
	name = monotonic;
	uuid = "00000000-0000-0000-0000-000000000000";
	description = "Monotonic Clock";
	freq = 1000000000;
	precision = 1;
	offset_s = 0;
	offset = 1497619475540462738;
	absolute = TRUE;
};

stream {
	id = 0;
	event.header := struct {
		enum : integer { size = 5; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; } { "compact" = 0 ... 30, "extended" = 31 } id;
		variant <id> {
			struct {
				integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.monotonic.value; } timestamp;
			} align(1) compact;
			struct {
				integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } id;
				integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.monotonic.value; } timestamp;
			} align(8) extended;
		} v;
	} align(8);

	packet.context := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.monotonic.value; } timestamp_begin;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.monotonic.value; } timestamp_end;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } content_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } packet_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } packet_seq_num;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } events_discarded;
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } cpu_id;
	} align(8);

	event.context := struct {
		integer { size = 32; align = 8; signed = true; encoding = none; base = decimal; byte_order = le; } _vpid;
		integer { size = 64; align = 8; signed = false; encoding = none; base = hexadecimal; byte_order = le; } _ip;
	} align(8);
};

event {
	name = "lttng_ust_statedump:bin_info";
	id = 0;
	stream_id = 0;
	loglevel = 13;
	fields := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = hexadecimal; byte_order = le; } _baddr;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } _memsz;
		string { encoding = UTF8; } _path;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } _is_pic;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } _has_build_id;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } _has_debug_link;
	} align(8);
};

event {
	name = "my_provider:my_first_tracepoint";
	id = 1;
	stream_id = 0;
	loglevel = 13;
	fields := struct {
		string { encoding = UTF8; } _my_string_field;
		integer { size = 32; align = 8; signed = true; encoding = none; base = decimal; byte_order = le; } _my_integer_field;
	} align(8);
};

